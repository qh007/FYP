iv_movies_OR <- lm(residuals(iv_movies2) ~ attend_v_f + attend_m_f + attend_n_f,attend_v_b,attend_m_b, attend_n_b, data = movies)
iv_movies_OR <- lm(residuals(iv_movies2) ~ attend_v_f + attend_m_f + attend_n_f+attend_v_b+attend_m_b+ attend_n_b, data = movies)
iv_movies_OR <- lm(residuals(iv_movies2) ~ attend_v_f + attend_m_f + attend_n_f+attend_v_b+attend_m_b+ attend_n_b, data = movies)
iv_movies_test <- linearHypothesis(iv_movies_OR,
c("attend_v_f = 0", "attend_m_f = 0", "attend_n_f =0", "attend_v_b = 0", "attend_m_b =0", "attend_n_b=0" ),
test = "Chisq")
iv_movies_OR <- lm(residuals(iv_movies2) ~ attend_v_f + attend_m_f + attend_n_f+attend_v_b+attend_m_b+ attend_n_b, data = movies)
iv_movies_test <- linearHypothesis(iv_movies_OR,
c("attend_v_f = 0", "attend_m_f = 0", "attend_n_f =0", "attend_v_b = 0", "attend_m_b =0", "attend_n_b=0" ),
test = "Chisq")
iv_movies_test
iv_movies_OR <- lm(residuals(iv_movies2) ~ attend_v_f + attend_m_f + attend_n_f+attend_v_b+attend_m_b+ attend_n_b, data = movies)
iv_movies_test <- linearHypothesis(iv_movies_OR,
c("attend_v_f = 0", "attend_m_f = 0", "attend_n_f =0", "attend_v_b = 0", "attend_m_b =0", "attend_n_b=0" ),
test = "Chisq")
iv_movies_test
pchisq(iv_movies_test[2, 5], df = 3, lower.tail = FALSE)
iv_movies_OR <- lm(residuals(iv_movies2) ~ attend_v_f + attend_m_f + attend_n_f+attend_v_b+attend_m_b+ attend_n_b, data = movies)
iv_movies_test <- linearHypothesis(iv_movies_OR,
c("attend_v_f = 0", "attend_m_f = 0", "attend_n_f =0", "attend_v_b = 0", "attend_m_b =0", "attend_n_b=0" ),
test = "Chisq")
pchisq(iv_movies_test[2, 5], df = 3, lower.tail = FALSE)
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
setwd('C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3')
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
setwd('C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3')
library("readxl")
library(AER)
library(stargazer)
names = read_excel("C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3/Names.xlsx")
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
setwd('C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3')
library("readxl")
library(AER)
library(stargazer)
names = read_excel("C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3/Names.xlsx")
View(names)
15.93+4.08*1.96
15.93 - 4.08*1.96
15.93+1.96*4.08/sqrt(5766)
15.93-1.96*4.08/sqrt(5766)
1.22 - 1.96*3.84
1.22 - 1.96*3.64
15.93 - 4.08*1.645
15.93 + 4.08*1.645
6*0.74
0.04*6
1.45*6
15.93 + 4.44
7.81 + 0.24
24.06+8.7
1348-1395
60/100
(0.6-0.5)/sqrt(100*0.6*0.4)
(0.6-0.5)/sqrt(0.6*0.4/100)
(0.55-0.5)/sqrt(0.55*0.45/100)
names = read_excel("C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3/Names.xlsx")
names = read_excel("C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3/Names.xlsx")
summary(names)
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
setwd('C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3')
library("readxl")
library(AER)
library(stargazer)
library(dplyr)
mean_byrace = names%>% group_by(black) %>% summarize(mean(call_back))
library(dplyr)
"C:\Program Files\R\R-4.3.2"
"C:/Program Files/R/R-4.3.2"
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
setwd('C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3')
library("readxl")
library(AER)
library(stargazer)
library(dplyr)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
setwd('C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3')
library("readxl")
library(AER)
library(stargazer)
library(dplyr)
names = read_excel("C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 3/Names.xlsx")
mean_byrace = names%>% group_by(black) %>% summarize(mean(call_back))
mean_byrace = names%>% group_by(black) %>% summarize(mean(call_back))
mean_byrace
mean_byrace = names%>% group_by(black) %>% summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), 95_CI = [mean(call_back) - SE*1.96, mean(call_back)+SE*1.96])
mean_byrace = names%>% group_by(black) %>% summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), 95_CI_lower = mean(call_back) - SE*1.96, 95_CI_upper = mean(call_back)+SE*1.96)
mean_byrace = names%>% group_by(black) %>% summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), CI95_lower = mean(call_back) - SE*1.96, CI95_upper = mean(call_back)+SE*1.96)
mean_byrace
mean_byrace = names%>% group_by(black) %>% summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), CI95_lower = mean(call_back) - SE*1.96, CI95_upper = mean(call_back)+SE*1.96)
mean_byrace
summary(names$call_back)
sd(names$call_back)
byrace = names%>% group_by(black) %>% summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), CI95_lower = mean(call_back) - SE*1.96, CI95_upper = mean(call_back)+SE*1.96)
byrace
0.06447639 - 0.09650924
black = names%>% group_by(black)
t_test_result <- t.test(black)
View(black)
t_test_result = names%>% group_by(black) %>% group_modify(~t.test(.x$call_back))
t_test_result = names%>% group_by(black) %>% group_modify(~t.test(call_back))
t_test_result = names%>% group_by(black) %>% group_modify(~t.test(.x$call_back))
black = names%>% select(black ==0)
black = names%>% filter(black ==0)
black = names%>% filter(black ==1)
white = names%>$ filter(black == 0)
black = names%>% filter(black ==1)
white = names%>% filter(black == 0)
t.test(black$call_back, white$call_back)
black = names%>% filter(black ==1)
white = names%>% filter(black == 0)
t.test(black$call_back, white$call_back)
0.03203285*100
byracegender = names%>% group_by(black) %>% group_by(female) summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), CI95_lower = mean(call_back) - SE*1.96, CI95_upper = mean(call_back)+SE*1.96)
byracegender = names%>% group_by(black) %>% group_by(female) %>%  summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), CI95_lower = mean(call_back) - SE*1.96, CI95_upper = mean(call_back)+SE*1.96)
byrace
byracegender = names%>% group_by(black, female) %>%  summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), CI95_lower = mean(call_back) - SE*1.96, CI95_upper = mean(call_back)+SE*1.96)
byrace
byracegender = names%>% group_by(black, female) %>%  summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), CI95_lower = mean(call_back) - SE*1.96, CI95_upper = mean(call_back)+SE*1.96)
byracegender
byracegender = names%>% group_by(black, female) %>%  summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), CI95_lower = mean(call_back) - SE*1.96, CI95_upper = mean(call_back)+SE*1.96)
byracegender
byracegender = names%>% .groups(black, female) %>%  summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), CI95_lower = mean(call_back) - SE*1.96, CI95_upper = mean(call_back)+SE*1.96)
byracegender = names%>% group_by(black, female) %>%  summarize(mean(call_back), SE = sd(call_back) / sqrt(n()), CI95_lower = mean(call_back) - SE*1.96, CI95_upper = mean(call_back)+SE*1.96, .groups = "keep")
byracegender
0.06627784 - 0.05828780
0.00799004*100
black_f = names%>% filter(black ==1, female == 1)
black_m = names%>% filter(black ==1, female == 0)
t.test(black_f$call_back, black_m$call_back)
white_f = names%>% filter(black ==0, female == 1)
white_m = names%>% filter(black ==0, female == 0)
t.test(white_f$call_back, white_m$call_back)
0.09892473 - 0.08869565
0.01022908*100
mmodel1 = lm(callback~., data = names)
mmodel1 = lm(call_back~., data = names)
summary(model1)
model1 = lm(call_back~., data = names)
summary(model1)
model1 = lm(call_back~female, data = names)
summary(model1)
model1 = lm(call_back~female+black, data = names)
summary(model1)
model1 = lm(call_back~female+black+female*black, data = names)
summary(model1)
model1 = lm(call_back~black+female*black, data = names)
summary(model1)
model1 = lm(call_back~black+female*black, data = names)
summary(model1)
model1 = lm(call_back~black+female*black, data = names)
summary(model1)
model1 = lm(call_back~female+black, data = names)
summary(model1)
View(names)
model1 = lm(call_back~ofjobs + yearsexp + honors + volunteer + military+empholes+workinschool+email+computerskills+specialskills+college+black, data = names)
summary(model1)
model1 = lm(call_back~black*ofjobs + black*yearsexp + black*honors + black*volunteer + black*military+black*empholes+black*workinschool+black*email+black*computerskills+black*specialskills+black*college+ black, data = names)black*
model1 = lm(call_back~ black*ofjobs + black*yearsexp + black*honors + black*volunteer + black*military + black*empholes + black*workinschool + black*email +black*computerskills +black*specialskills+ black*college+ black, data = names)
summary(model1)
model1 = lm(call_back~  black*yearsexp + black*honors + black*empholes +black*computerskills +black*specialskills, data = names)
summary(model1)
model1 = lm(call_back~female*black, data = names)
summary(model1)
lm(call_back~black, data = names)
summary(lm(call_back~black, data = names))
summary(lm(call_back~black, data = names))
byrace = names%>% group_by(black)
byrace
byrace = names%>% group_by(black) %>% summarize(mean(call_back))
byrace
byrace = names%>% group_by(black) %>% summarize(mean(call_back))
byrace
byrace = names%>% group_by(black) %>% summarize(mean(call_back))
byrace
summary(lm(call_back~black, data = names))
confint(lm(call_back~black, data = names))
model1 = lm(call_back~high, data = names)
summary(model1)
0.014057   *100
model1 = lm(call_back~  black*high, data = names)
summary(model1)
-0.023102-0.017781
0.0229*100
0.022948 -0.017781
0.005167*100
model1 = lm(call_back~  firstname, data = names)
summary(model1)
byracegender = names%>% group_by(black, female) %>%  summarize(mean(call_back) .groups = "keep")
byracegender = names%>% group_by(black, female) %>%  summarize(mean(call_back), .groups = "keep")
byracegender
model1 = lm(call_back~  firstname*black, data = names)
summary(model1)
firstnames = names%>% group_by(firstnames)
firstnames = names%>% group_by(firstname)
firstnames = names%>% group_by(firstname)%>%mean(Black)
firstnames = names%>% group_by(firstname)%>%mean(black)
firstnames = names%>% group_by(firstname)%>%mean(call_back)
byrace = names%>% group_by(black) %>% summarize(mean(call_back), n(), sd(call_back))
byrace
byracegender = names%>% group_by(black, female) %>%  summarize(mean(call_back),n(), sd(call_back), .groups = "keep")
byracegender
confint(lm(call_back~black, data = names))
byracegender = names%>% group_by(black, female) %>%  summarize(mean(call_back),n(), sd(call_back), .groups = "keep")
byracegender
0.06627784 - 0.09892473
-0.03264689*100
black_f = names%>% filter(black ==1, female == 1)
white_f = names%>% filter(black ==0, female == 1)
t.test(black_f$call_back, white_f$call_back)
0.05828780 - 0.08869565
-0.03040785*100
0.05828780 - 0.08869565
black_m = names%>% filter(black ==1, female == 0)
white_m = names%>% filter(black ==0, female == 0)
t.test(black_m$call_back, white_m$call_back)
black_f = names%>% filter(black ==1, female == 1)
white_f = names%>% filter(black ==0, female == 1)
t.test(black_f$call_back, white_f$call_back)
black_m = names%>% filter(black ==1, female == 0)
white_m = names%>% filter(black ==0, female == 0)
t.test(black_m$call_back, white_m$call_back)
model1 = lm(call_back~female*black, data = names)
summary(model1)
black_f = names%>% filter(black ==1 & female == 1)
white_f = names%>% filter(black ==0 & female == 1)
t.test(black_f$call_back, white_f$call_back)
View(black_f)
help(t.test)
black_f = names%>% filter(black ==1 & female == 1)
white_f = names%>% filter(black ==0 & female == 1)
t.test(black_f$call_back, white_f$call_back, mu = 0)
black_f = names%>% filter(black ==1 & female == 1)
white_f = names%>% filter(black ==0 & female == 1)
t.test(black_f$call_back, white_f$call_back)
black_f = names%>% filter(black ==1 & female == 1)
white_f = names%>% filter(black ==0 & female == 1)
t.test(black_f$call_back, white_f$call_back, var.equal=F)
black_f = names%>% filter(black ==1 & female == 1)
white_f = names%>% filter(black ==0 & female == 1)
t.test(black_f$call_back, white_f$call_back)
model1 = lm(black~ female+high+chicago, data = names)
summary(model1)
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
setwd('C:/Users/zhouq/OneDrive - Nanyang Technological University/HE4903- Advanced Econometrics/Problem Sets/Problem set 6')
library("readxl")
library(AER)
library(stargazer)
library(dplyr)
# Define your variables
y1 <- c(1, 2, 3, 4, 5)  # example values for y1
x1 <- c(2, 4, 6, 8, 10) # example values for x1
b <- 0.5  # example value for b
# Calculate the squared differences
squared_diff <- (y1 - b * x1)^2
# Plot
plot(x1, squared_diff, type = "l", col = "blue", lwd = 2,
xlab = "x1", ylab = "(y1 - bx1)^2", main = "(y1 - bx1)^2 vs. x1")
# Define a range of values for b
b <- seq(-10, 10, by = 0.1)
# Calculate corresponding y values
y <- (2 - b)^2
# Plot the function
plot(b, y, type = "l", col = "blue", lwd = 2,
main = expression(paste("Plot of ", (2 - b)^2)),
xlab = "b", ylab = "y")
# Define a range of values for b
b = seq(-5, 5, by = 0.1)
# Calculate corresponding y values
y = (2 - b)^2
# Plot the function
plot(b, y, type = "l", col = "blue", lwd = 2,
main = expression(paste("Plot of ", (2 - b)^2)),
xlab = "b", ylab = "y")
# Define a range of values for b
b = seq(-10, 10 , by = 0.1)
# Calculate corresponding y values
y = (2 - b)^2
# Plot the function
plot(b, y, type = "l", col = "blue", lwd = 2,
main = expression(paste("Plot of ", (2 - b)^2)),
xlab = "b", ylab = "y")
# Define the range of values for b
b <- seq(-10, 10, by = 0.1)
# Calculate the values for |b| and (2 - b)^2 + |b|
abs_b <- abs(b)
func <- (2 - b)^2 + abs_b
# Plot the functions
plot(b, abs_b, type = "l", col = "blue", xlab = "b", ylab = "|b|", main = "Plot of |b| and (2 - b)^2 + |b|")
lines(b, func, type = "l", col = "red")
legend("topright", legend = c("|b|", "(2 - b)^2 + |b|"), col = c("blue", "red"), lty = 1, cex = 0.8)
# Define the range of values for b
b <- seq(-10, 10, by = 0.1)
# Calculate the values for |b| and (2 - b)^2 + |b|
abs_b <- abs(b)
func <- (2 - b)^2 + abs_b
# Plot the functions
plot(b, abs_b, type = "l", col = "blue", xlab = "b", ylab = "|b|", main = "Plot of |b| and (2 - b)^2 + |b|")
plot(b, y, type = "l", col = "black", lwd = 2, main = expression(paste("Plot of ", (2 - b)^2)),
xlab = "b", ylab = "y")
lines(b, func, type = "l", col = "red")
legend("topright", legend = c("|b|", "(2 - b)^2 + |b|"), col = c("blue", "red"), lty = 1, cex = 0.8)
# Define the range of values for b
b <- seq(-10, 10, by = 0.1)
# Calculate the values for |b| and (2 - b)^2 + |b|
abs_b <- abs(b)
func <- (2 - b)^2 + abs_b
# Plot the functions
plot(b, abs_b, type = "l", col = "blue", xlab = "b", ylab = "|b|", main = expression(paste("Plot for", \lambda = 1)
# Define the range of values for b
b <- seq(-10, 10, by = 0.1)
# Calculate the values for |b|, (2 - b)^2 + |b|, and (2 - b)^2
abs_b <- abs(b)
lasso <- (2 - b)^2 + abs_b
squared <- (2 - b)^2
# Plot the functions
plot(b, abs_b, type = "l", col = "blue", xlab = "b", ylab = "Function Value", main = expression(lambda^{lasso} == 1))
lines(b, lasso, type = "l", col = "red")
lines(b, squared, type = "l", col = "green")
legend("topright", legend = expression("|b|", "(2 - b)^2 + |b|", "(2 - b)^2"), col = c("blue", "red", "green"), lty = 1, cex = 0.8)
# Define a range of values for b
b = seq(-10, 10 , by = 0.1)
# Calculate corresponding y values
y = (2 - b)^2
# Plot the function
plot(b, y, type = "l", col = "blue", lwd = 2,
main = expression(paste("Plot of ", (2 - b)^2)),
xlab = "b", ylab = "y")
# Define a range of values for b
b = seq(-10, 10 , by = 0.1)
# Calculate corresponding y values
y = (2 - b)^2
# Plot the function
plot(b, y, type = "l", col = "blue", lwd = 2,
main = expression(paste("Plot of ", (2 - b)^2)),
xlab = "b", ylab = "y")
# unit root test to check that all data are stationary
adf.test(na.omit(data.q$GDP))
setwd('C:/Users/zhouq/OneDrive - Nanyang Technological University/FYP/Codes/FYP')
library(lubridate)
library(tseries)
# Load Data
data.m = read.table('month.txt', header = T, sep = ',')
data.q = read.table('quarter.txt', header = T, sep = ',')
D = function(x){c(NA,diff(x))}
DD = function(x){c(NA,NA,diff(diff(x)))}
L = function(x){c(log(x))}
DL = function(x){c(NA,diff(log(x)))}
DDL = function(x){c(NA,NA,diff(diff(log(x))))}
startDate = "1959-01-01"
endDate = "2019-12-31"
date_format = '%d/%m/%Y'
date_filtering = function(x, start_date, end_date, date_format){
transform_header = x[1,]
x$Date = as.Date(x$Date,format = date_format)
x = x[x$Date >= start_date & x$Date <= end_date,]
x[1,] = transform_header
return(x)}
# transformation type is in first row
transform = function(x){
c2 = which(x[1,]==2)
c3 = which(x[1,]==3)
c4 = which(x[1,]==4)
c5 = which(x[1,]==5)
c6 = which(x[1,]==6)
x1 = x[-(1),] # remove first row
for (i in c2){tt = D(x1[,i])
x1[,i] = tt}
for (i in c3){
tt = DD(x1[,i])
x1[,i] = tt }
for (i in c4){
tt = L(x1[,i])
x1[,i] = tt }
for (i in c5){
tt = DL(x1[,i])
x1[,i] = tt}
for (i in c6){
tt = DDL(x1[,i])
x1[,i] = tt }
x = x1}
# transform monthly data
x = date_filtering(data.m,
start_date =  startDate,
end_date = endDate,
date_format = date_format)
data.m = transform(x)
data.m1 <- ts(data.m[,-1], start = c(1990, 1), frequency = 12)
data.q1 <- aggregate(data.m1, nfrequency = 4, mean)
# transform quarterly GDP data
x1 = date_filtering(data.q,
start_date = startDate,
end_date = endDate,
date_format = date_format)
x1[,2] = DL(x1[,2])
data.q = x1
data.q[1,1]= dmy('31/03/1959')
# combine datasets
data_transform <- cbind(data.q, data.q1)
# unit root test to check that all data are stationary
adf.test(na.omit(data.q$GDP))
# unit root test to check that all data are stationary
gdp_test = adf.test(na.omit(data.q$GDP))
gdp_test$p.value
len(data.q)
data.q
len(data.q1)
data.q1
test_result <- adf.test(data[[col]])
for (col in colnames(data.q1)) {
test_result <- adf.test(data[[col]])
p_value <- test_result$p.value
result <- rbind(result, data.frame(variable = col, p_value = p_value))
}
test_result <- adf.test(data.q1[[col]])
data.q1[col]
data.q1[[col]]
colnames(data.q1)
data_transform
for (col in colnames(data_transform)) {
test_result <- adf.test(data_transform[[col]])
p_value <- test_result$p.value
result <- rbind(result, data.frame(variable = col, p_value = p_value))
}
result <- data.frame(variable = character(), p_value = numeric(), stringsAsFactors = FALSE)
result
result <- data.frame(variable = character(), p_value = numeric(), stringsAsFactors = FALSE)
for (col in colnames(data_transform)) {
test_result <- adf.test(data_transform[[col]])
p_value <- test_result$p.value
result <- rbind(result, data.frame(variable = col, p_value = p_value))
}
result
result <- data.frame(variable = character(), p_value = numeric(), stringsAsFactors = FALSE)
for (col in colnames(data_transform)) {
test_result <- adf.test(na.omit(data_transform[[col]]))
p_value <- test_result$p.value
result <- rbind(result, data.frame(variable = col, p_value = p_value))
}
result
result <- data.frame(variable = character(), p_value = numeric(), reject_H0 = character(), stringsAsFactors = FALSE)
for (col in colnames(data_transform)) {
test_result = adf.test(na.omit(data_transform[[col]]))
p_value = test_result$p.value
reject = ifelse(p_value < 0.05, "Yes", "No")
result = rbind(result, data.frame(variable = col, p_value = p_value))
}
return results
results
result
result <- data.frame(variable = character(), p_value = numeric(), reject_H0 = character(), stringsAsFactors = FALSE)
for (col in colnames(data_transform)) {
test_result = adf.test(na.omit(data_transform[[col]]))
p_value = test_result$p.value
reject = ifelse(p_value < 0.05, "Yes", "No")
result = rbind(result, data.frame(variable = col, p_value = p_value))
}
result
result <- data.frame(variable = character(), p_value = numeric(), reject_H0 = character(), stringsAsFactors = FALSE)
for (col in colnames(data_transform)) {
test_result = adf.test(na.omit(data_transform[[col]]))
p_value = test_result$p.value
reject = ifelse(p_value < 0.05, "Yes", "No")
result = rbind(result, data.frame(variable = col, p_value = p_value, reject_H0 = reject))
}
result
install.packages("xtable")
library(xtable)
xtable_result <- xtable(result)
print(xtable_result, include.rownames = FALSE)
print(xtable_result, include.rownames = FALSE, caption = "Results of ADF Test for Stationarity", label = "tab:stationarity_results", booktabs = TRUE)
library(xtable)
xtable_result <- xtable(result)
# Print the LaTeX code for the table with a caption and label
print(xtable_result, caption = "Results of ADF Test for Stationarity", label = "tab:stationarity_results", booktabs = TRUE, include.rownames = FALSE)
# Print the LaTeX code for the table with a caption and label
print(xtable_result, caption = "Results of ADF Test for Stationarity")
# Print the LaTeX code for the table with a caption and label
print(xtable_result)
xtable_result <- xtable(result[,2:])
result
result[1,1]
result[2:, ]
result{2,}
result[2,]
len(result)
col(result)
nrow(result)
xtable_result <- xtable(result[2:nrow(result),])
# Print the LaTeX code for the table with a caption and label
print(xtable_result, include.rownames = FALSE)
result <- data.frame(Variable = character(), p_value = numeric(), Reject_H0 = character(), stringsAsFactors = FALSE)
for (col in colnames(data_transform)) {
test_result = adf.test(na.omit(data_transform[[col]]))
p_value = test_result$p.value
reject = ifelse(p_value < 0.05, "Yes", "No")
result = rbind(result, data.frame(Variable = col, p_value = p_value, Reject_H0 = reject))
}
result
#output results as LATEX table
library(xtable)
xtable_result <- xtable(result[2:nrow(result),])
# Print the LaTeX code for the table with a caption and label
print(xtable_result, include.rownames = FALSE)
